We have 3 approaches to solve the problem: Naive Approach, Euclidean Approach & Optimised Euclidean Approach

1. Naive Approach

The basic idea is to find the minimum of the two numbers and then, traverse from the min number to 1, to find the highest factor which is also a factor of the other number.

Time Complexity: O(min(a,b)) 

Auxiliary Space: O(1)



2. Euclidean Approach:

The idea of this algorithm is, the GCD of two numbers doesnâ€™t change if the smaller number is subtracted from the bigger number. This is the Euclidean algorithm by subtraction. It is a process of repeat subtraction, carrying the result forward each time until the result is equal to any one number being subtracted.

Time Complexity: O(min(a,b))

Auxiliary Space: O(1)



3. Optimised Euclidean Approach

In this approach, instead of repeatedly subtracting the numbers till both become equal, we can check if one number is a factor of the other.

Example:

Input: a = 42, b = 56:
Since b > a, we check if b%a=0. Since the answer is no, we proceed further.
Now b>a. So b = b-a and a remains the same. So b = 56-42 = 14 & a= 42. 

Input: a = 42, b = 14:
Since a>b, we check if a%b=0. Now the answer is yes.
So we print smaller among a and b as H.C.F . i.e. 42 is  3 times 14.
So HCF is 14. 

Time Complexity: O(log(min(a,b))

Auxiliary Space: O(1)