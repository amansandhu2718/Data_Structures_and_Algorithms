We have 3 approaches to solve the problem: Naive Approach, Efficient Approach & More Efficient Approach

1. Naive Approach:

Iterate from 2 to  (n-1) and check if any number in this range divides n. If the number divides n, then it is not a prime number.

Time Complexity: O(n)

Auxiliary Space: O(1)



2. Efficient Approach:

Iterate through all numbers from 2 to square root of n and for every number check if it divides n [because if a number is expressed as n = xy and any of the x or y is greater than the root of n, the other must be less than the root value]. If we find any number that divides, we return false.

Time Complexity: O(sqrt(n))

Auxiliary space: O(1)



3. More Efficient Approach

Steps:

We will deal with a few numbers such as 1, 2, and 3, and the numbers which are divisible by 2 and 3 in separate cases.
For the remaining numbers, we iterate from 5 to sqrt(n) and check for each iteration whether (that value) or (that value + 2) divides n or not and increment the value by 6 [because any prime can be expressed as 6n+1 or 6n-1].
If we find any number that divides, we return false, else true.
Time complexity: O(sqrt(n))

Auxiliary space: O(1)

